// Cloudflare Workers version of the API proxy

// Logging helper for Cloudflare environment
const logger = {
  debug: (message) => console.debug(`[DEBUG] ${message}`),
  info: (message) => console.info(`[INFO] ${message}`),
  warn: (message) => console.warn(`[WARN] ${message}`),
  error: (message) => console.error(`[ERROR] ${message}`)
};

/**
 * Validates message format in the request
 */
function validateMessages(messages) {
  logger.debug('Validating message format');
  
  if (!messages || !Array.isArray(messages)) {
    logger.error('Invalid request: messages array is missing or not an array');
    return { valid: false, error: 'Messages array is required' };
  }
  
  for (const msg of messages) {
    if (!msg.role || !('content' in msg)) {
      logger.error('Invalid message format: missing role or content');
      return { valid: false, error: 'Invalid message format: each message must have role and content' };
    }
  }
  
  return { valid: true };
}

/**
 * Converts OpenAI format messages to WoCloud format
 */
function convertHistory(messages) {
  logger.debug('Converting message history to WoCloud format');
  const history = [];

  for (let i = 0; i < messages.length - 1; i++) {
    try {
      if (messages[i].role === 'user' && i + 1 < messages.length && messages[i + 1].role === 'assistant') {
        let query = messages[i].content;
        let response = messages[i + 1].content;
        
        // Convert JSON content to string if necessary
        if (typeof query !== 'string') {
          query = JSON.stringify(query);
        }
        if (typeof response !== 'string') {
          response = JSON.stringify(response);
        }
        
        query = query.trim();
        response = response.trim();

        history.push({
          query,
          rewriteQuery: query,
          uploadFileUrl: "",
          response,
          reasoningContent: "",
          state: "finish",
          key: String(Math.random())
        });
      }
    } catch (error) {
      logger.warn(`Error processing message: ${error.message}`);
    }
  }

  logger.debug(`Converted history length: ${history.length}`);
  return history;
}

/**
 * Unified handling of WoCloud error responses
 */
async function handleWoError(response) {
  logger.debug('Handling WoCloud error response');
  try {
    const contentType = response.headers.get('content-type') || '';
    
    if (contentType.startsWith('text/event-stream')) {
      const text = await response.text();
      const lines = text.split('\n');
      for (const line of lines) {
        if (line.startsWith('data:')) {
          try {
            const errorData = JSON.parse(line.substring(5).trim());
            return {
              code: errorData.code,
              message: errorData.message || 'Unknown error'
            };
          } catch (error) {
            return {
              code: "PARSE_ERROR",
              message: `Invalid JSON in error response: ${line.substring(5, 100)}`
            };
          }
        }
      }
    } else {
      try {
        const errorData = await response.json();
        return {
          code: errorData.code,
          message: errorData.message || errorData.response || 'Unknown error'
        };
      } catch (error) {
        const text = await response.text();
        return {
          code: "PARSE_ERROR",
          message: `Invalid JSON in error response: ${text.substring(0, 100)}`
        };
      }
    }
  } catch (error) {
    return {
      code: "PARSE_ERROR",
      message: `Failed to parse error response: ${error.message}`
    };
  }
}

/**
 * Creates a single chunk in the OpenAI streaming format
 */
function createChunk(content, responseId, createdTime, finishReason = null, isStart = false, role = null) {
  const chunkData = {
    id: responseId,
    object: 'chat.completion.chunk',
    created: createdTime,
    model: 'DeepSeek-R1',
    choices: [{
      index: 0,
      delta: {},
      finish_reason: finishReason
    }]
  };
  
  if (isStart && role) {
    chunkData.choices[0].delta.role = role;
  } else if (content) {
    chunkData.choices[0].delta.content = content;
  }

  return `data: ${JSON.stringify(chunkData)}\n\n`;
}

/**
 * Handles streaming response format for Cloudflare Workers
 */
async function handleStreamResponse(request, env, ctx, userMessage, accessToken, history) {
  logger.info('Starting streaming response');
  
  const woHeaders = {
    'content-type': 'application/json',
    'origin': 'https://panservice.mail.wo.cn',
    'referer': 'https://panservice.mail.wo.cn/h5/wocloud_ai/?modelType=1',
    'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
    'x-yp-access-token': accessToken,
    'x-yp-client-id': '1001000035',
    'accept': 'text/event-stream'
  };

  const woData = {
    modelId: 1,
    input: userMessage,
    history
  };
  
  // Create a TransformStream to handle streaming
  const { readable, writable } = new TransformStream();
  const writer = writable.getWriter();
  
  // Create headers for the response
  const responseHeaders = {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive'
  };
  
  // Start streaming response
  ctx.waitUntil((async () => {
    try {
      const responseId = `chatcmpl-${crypto.randomUUID()}`;
      const createdTime = Math.floor(Date.now() / 1000);
      let fullContent = "";
      
      // Send initial chunk with role
      await writer.write(
        new TextEncoder().encode(
          createChunk("", responseId, createdTime, null, true, "assistant")
        )
      );
      
      const response = await fetch(
        'https://panservice.mail.wo.cn/wohome/ai/assistant/query',
        {
          method: 'POST',
          headers: woHeaders,
          body: JSON.stringify(woData)
        }
      );
      
      logger.debug(`WoCloud stream response status: ${response.status}`);
      
      if (!response.ok) {
        const errorInfo = await handleWoError(response);
        logger.error(`WoCloud API error: ${JSON.stringify(errorInfo)}`);
        await writer.write(
          new TextEncoder().encode(
            `data: ${JSON.stringify({ error: errorInfo })}\n\n`
          )
        );
        await writer.write(new TextEncoder().encode('data: [DONE]\n\n'));
        await writer.close();
        return;
      }
      
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let buffer = '';
      
      while (true) {
        const { done, value } = await reader.read();
        
        if (done) {
          break;
        }
        
        buffer += decoder.decode(value, { stream: true });
        
        // Process complete lines
        const lines = buffer.split('\n');
        buffer = lines.pop() || ''; // Keep the last incomplete line in the buffer
        
        for (const line of lines) {
          if (line.startsWith('data:')) {
            try {
              const data = JSON.parse(line.substring(5));
              
              if (data.code && data.code !== 0 && data.code !== '0') {
                logger.error(`WoCloud stream error: ${JSON.stringify(data)}`);
                await writer.write(
                  new TextEncoder().encode(
                    `data: ${JSON.stringify({ error: { code: data.code, message: data.message || 'Unknown error' } })}\n\n`
                  )
                );
                await writer.write(new TextEncoder().encode('data: [DONE]\n\n'));
                await writer.close();
                return;
              }
              
              const content = data.response || '';
              const reasoning = data.reasoningContent || '';
              
              if (reasoning) {
                if (!fullContent) {
                  await writer.write(
                    new TextEncoder().encode(
                      createChunk("<think>\n", responseId, createdTime)
                    )
                  );
                }
                
                fullContent += reasoning;
                await writer.write(
                  new TextEncoder().encode(
                    createChunk(reasoning, responseId, createdTime)
                  )
                );
              }
              
              if (content) {
                if (fullContent) {  // If there's thinking content, end thinking first
                  await writer.write(
                    new TextEncoder().encode(
                      createChunk("\n</think>\n\n", responseId, createdTime)
                    )
                  );
                  fullContent = "";
                }
                await writer.write(
                  new TextEncoder().encode(
                    createChunk(content, responseId, createdTime)
                  )
                );
              }
              
              if (data.finish === 1) {
                break;
              }
            } catch (error) {
              logger.error(`Stream parsing error: ${error.message}`);
              await writer.write(
                new TextEncoder().encode(
                  `data: ${JSON.stringify({ error: { code: 'PARSE_ERROR', message: error.message } })}\n\n`
                )
              );
            }
          }
        }
      }
      
      // Process any remaining data in the buffer
      if (buffer && buffer.startsWith('data:')) {
        try {
          const data = JSON.parse(buffer.substring(5));
          
          const content = data.response || '';
          const reasoning = data.reasoningContent || '';
          
          if (reasoning) {
            if (!fullContent) {
              await writer.write(
                new TextEncoder().encode(
                  createChunk("<think>\n", responseId, createdTime)
                )
              );
            }
            
            fullContent += reasoning;
            await writer.write(
              new TextEncoder().encode(
                createChunk(reasoning, responseId, createdTime)
              )
            );
          }
          
          if (content) {
            if (fullContent) {
              await writer.write(
                new TextEncoder().encode(
                  createChunk("\n</think>\n\n", responseId, createdTime)
                )
              );
              fullContent = "";
            }
            await writer.write(
              new TextEncoder().encode(
                createChunk(content, responseId, createdTime)
              )
            );
          }
        } catch (error) {
          logger.warn(`Error processing remaining buffer: ${error.message}`);
        }
      }
      
      // Send completion chunk
      await writer.write(
        new TextEncoder().encode(
          createChunk("", responseId, createdTime, "stop")
        )
      );
      await writer.write(new TextEncoder().encode('data: [DONE]\n\n'));
    } catch (error) {
      logger.error(`Streaming error: ${error.message}`);
      await writer.write(
        new TextEncoder().encode(
          `data: ${JSON.stringify({ error: { code: 'CONNECTION_ERROR', message: error.message } })}\n\n`
        )
      );
      await writer.write(new TextEncoder().encode('data: [DONE]\n\n'));
    } finally {
      await writer.close();
    }
  })());
  
  return new Response(readable, { headers: responseHeaders });
}

/**
 * Handles non-streaming response format for Cloudflare Workers
 */
async function handleNonStreamResponse(request, env, ctx, userMessage, accessToken, history) {
  logger.info('Processing non-streaming request');
  
  const woHeaders = {
    'content-type': 'application/json',
    'origin': 'https://panservice.mail.wo.cn',
    'referer': 'https://panservice.mail.wo.cn/h5/wocloud_ai/?modelType=1',
    'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
    'x-yp-access-token': accessToken,
    'x-yp-client-id': '1001000035',
    'accept': 'application/json'
  };

  const woData = {
    modelId: 1,
    input: userMessage,
    history
  };
  
  try {
    const response = await fetch(
      'https://panservice.mail.wo.cn/wohome/ai/assistant/query',
      {
        method: 'POST',
        headers: woHeaders,
        body: JSON.stringify(woData)
      }
    );
    
    logger.debug(`WoCloud response status: ${response.status}`);
    
    if (!response.ok) {
      const errorInfo = await handleWoError(response);
      logger.error(`WoCloud API error: ${JSON.stringify(errorInfo)}`);
      return new Response(
        JSON.stringify({ error: errorInfo }),
        {
          status: 502,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
    
    const contentType = response.headers.get('content-type') || '';
    let finalContent = "";
    
    if (contentType.startsWith('application/json')) {
      try {
        const responseData = await response.json();
        
        if (responseData.code && responseData.code !== 0 && responseData.code !== '0') {
          logger.error(`WoCloud API error: ${JSON.stringify(responseData)}`);
          return new Response(
            JSON.stringify({
              error: {
                code: responseData.code,
                message: responseData.message || "Unknown error"
              }
            }),
            {
              status: 502,
              headers: { 'Content-Type': 'application/json' }
            }
          );
        }
        
        const content = responseData.response || '';
        const reasoning = responseData.reasoningContent || '';
        
        if (reasoning) {
          finalContent += `<think>\n${reasoning}\n</think>\n\n`;
        }
        finalContent += content;
      } catch (error) {
        const text = await response.text();
        logger.error(`Invalid JSON Response: ${text.substring(0, 200)}`);
        return new Response(
          JSON.stringify({
            error: {
              code: "PARSE_ERROR",
              message: "Failed to parse JSON response"
            }
          }),
          {
            status: 502,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }
    } else {
      const responseData = { response: "", reasoningContent: "" };
      try {
        const text = await response.text();
        const lines = text.split('\n');
        
        for (const line of lines) {
          if (line.startsWith('data:')) {
            try {
              const data = JSON.parse(line.substring(5));
              if (data.code && data.code !== 0 && data.code !== '0') {
                logger.error(`WoCloud API error in stream: ${JSON.stringify(data)}`);
                return new Response(
                  JSON.stringify({
                    error: {
                      code: data.code,
                      message: data.message || 'Unknown error'
                    }
                  }),
                  {
                    status: 502,
                    headers: { 'Content-Type': 'application/json' }
                  }
                );
              }
              responseData.response += data.response || '';
              responseData.reasoningContent += data.reasoningContent || '';
            } catch (error) {
              logger.warn(`Invalid JSON in stream line: ${line.substring(0, 100)}`);
            }
          }
        }
        
        if (responseData.reasoningContent) {
          finalContent += `<think>\n${responseData.reasoningContent}\n</think>\n\n`;
        }
        finalContent += responseData.response;
      } catch (error) {
        logger.error(`Error parsing stream response: ${error.message}`);
        return new Response(
          JSON.stringify({
            error: {
              code: "PARSE_ERROR",
              message: `Failed to parse stream response: ${error.message}`
            }
          }),
          {
            status: 502,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }
    }
    
    if (!finalContent) {
      logger.warn("Empty content in response");
      finalContent = "抱歉，没有收到有效的回复。";
    }
    
    logger.info('Successfully processed non-streaming request');
    
    return new Response(
      JSON.stringify({
        id: `chatcmpl-${crypto.randomUUID()}`,
        object: "chat.completion",
        created: Math.floor(Date.now() / 1000),
        model: "DeepSeek-R1",
        choices: [{
          index: 0,
          message: {
            role: "assistant",
            content: finalContent
          },
          finish_reason: "stop"
        }],
        usage: {
          prompt_tokens: userMessage.length,
          completion_tokens: finalContent.length,
          total_tokens: userMessage.length + finalContent.length
        }
      }),
      {
        headers: { 'Content-Type': 'application/json' }
      }
    );
  } catch (error) {
    logger.error(`Request failed: ${error.message}`);
    return new Response(
      JSON.stringify({
        error: {
          code: "NETWORK_ERROR",
          message: error.message
        }
      }),
      {
        status: 502,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
}

/**
 * Main request handler for Cloudflare Workers
 */
async function handleRequest(request, env, ctx) {
  const url = new URL(request.url);
  
  // Handle models list endpoint
  if (url.pathname === '/v1/models' && request.method === 'GET') {
    logger.info('Processing models list request');
    
    return new Response(
      JSON.stringify({
        object: "list",
        data: [{
          id: "DeepSeek-R1",
          object: "model",
          created: Math.floor(Date.now() / 1000),
          owned_by: "ChinaUnicom",
          capabilities: ["chat", "completions"]
        }]
      }),
      {
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
  
  // Handle chat completions endpoint
  if (url.pathname === '/v1/chat/completions' && request.method === 'POST') {
    try {
      const authorization = request.headers.get('authorization');
      
      if (!authorization || !authorization.startsWith('Bearer ')) {
        logger.error('Invalid authorization header format');
        return new Response(
          JSON.stringify({ error: 'Invalid Authorization header format' }),
          {
            status: 401,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }
      
      const accessToken = authorization.substring(7);
      let requestData;
      
      try {
        requestData = await request.json();
      } catch (error) {
        logger.error(`Failed to parse request JSON: ${error.message}`);
        return new Response(
          JSON.stringify({ error: 'Invalid JSON in request body' }),
          {
            status: 400,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }
      
      const streamMode = requestData.stream || false;
      const messages = requestData.messages;
      
      // Validate messages
      const validation = validateMessages(messages);
      if (!validation.valid) {
        return new Response(
          JSON.stringify({ error: validation.error }),
          {
            status: 400,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }
      
      logger.info(`Processing chat completion request (stream=${streamMode})`);
      
      // Extract last user message
      let userMessage = null;
      
      for (let i = messages.length - 1; i >= 0; i--) {
        if (messages[i].role === 'user' && messages[i].content) {
          userMessage = messages[i].content;
          break;
        }
      }
      
      if (!userMessage) {
        logger.error('No valid user message found');
        return new Response(
          JSON.stringify({ error: 'No valid user message found' }),
          {
            status: 400,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }
      
      // Convert JSON content to string if necessary
      if (typeof userMessage !== 'string') {
        userMessage = JSON.stringify(userMessage);
      }
      
      // Convert history and handle response based on stream mode
      const history = convertHistory(messages.slice(0, -1));  // Exclude last user message
      
      if (streamMode) {
        return handleStreamResponse(request, env, ctx, userMessage, accessToken, history);
      } else {
        return handleNonStreamResponse(request, env, ctx, userMessage, accessToken, history);
      }
    } catch (error) {
      logger.error(`Unexpected error: ${error.message}`);
      return new Response(
        JSON.stringify({
          error: {
            code: "INTERNAL_ERROR",
            message: error.message
          }
        }),
        {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
  }
  
  // Handle not found
  return new Response(
    JSON.stringify({ error: 'Not Found' }),
    {
      status: 404,
      headers: { 'Content-Type': 'application/json' }
    }
  );
}

// Export the handler for Cloudflare Workers
export default {
  fetch: handleRequest
};
